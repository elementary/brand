<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   width="800"
   height="800"
   id="svg2"
   version="1.1"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/">
  <defs
     id="defs4">
    <filter
       style="color-interpolation-filters:sRGB"
       id="filter10305-5"
       x="-0.010908342"
       y="-0.010900523"
       width="1.0218167"
       height="1.021801">
      <feGaussianBlur
         stdDeviation="2.9577692"
         id="feGaussianBlur10305-6" />
    </filter>
    <filter
       style="color-interpolation-filters:sRGB"
       id="filter10306-1"
       x="-0.0051803615"
       y="-0.0051766482"
       width="1.0103607"
       height="1.0103533">
      <feGaussianBlur
         stdDeviation="1.4046419"
         id="feGaussianBlur10306-2" />
    </filter>
    <mask
       maskUnits="userSpaceOnUse"
       id="mask7">
      <path
         id="path8"
         style="font-variation-settings:normal;vector-effect:none;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:4.62852;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000"
         d="m 400,329.36218 a 323,323 0 0 0 -323,323 323,323 0 0 0 323,323 323,323 0 0 0 41.7168,-2.98242 A 198.29802,198.29802 0 0 1 411.01562,942.49499 291,291 0 0 1 400,943.36218 291,291 0 0 1 168.18359,827.62976 c 27.77861,-5.93118 55.01715,-15.56955 84.63282,-29.125 4.04756,2.78173 8.2109,5.40215 12.49023,7.81445 0,9.9e-4 -6.3e-4,0.003 0.01,0.004 0,9.8e-4 0.01,0.002 0.01,0.004 17.15749,9.78362 35.81519,16.43988 54.7461,20.25196 l 0.01,0.002 c 10.00342,1.99584 19.20948,3.15602 28.51172,3.7207 0,1.8e-4 0.01,-1.8e-4 0.01,0 9.23374,0.63001 17.90395,0.53195 28.2539,0.0879 0.0105,10e-6 0.0112,10e-6 0.0176,0 l -0.9375,-33.93164 -0.0156,-0.002 c -16.88237,0.0938 -31.75117,-1.23425 -47.9961,-5.19727 v -0.002 c -12.2072,-3.00211 -23.86504,-7.52439 -34.74414,-13.30664 14.01243,-7.79265 27.72049,-16.08777 41.04102,-24.95312 0,-0.002 0.01,-0.004 0.01,-0.006 30.10126,-20.1823 58.64514,-42.96671 84.19336,-69.25 12.76302,-13.13677 24.77962,-27.15592 35.61133,-42.23633 v -0.002 c 5.429,-7.53698 10.53508,-15.35233 15.27344,-23.42968 v -0.0117 c 4.71927,-8.10254 9.03467,-16.49236 12.87109,-25.15625 v -0.004 c 7.65964,-17.3454 13.25791,-35.9492 15.62695,-55.27344 v -0.002 c 0.58885,-4.81719 0.9964,-9.67879 1.15821,-14.57422 7.4e-4,-0.0138 0,-0.029 0,-0.043 0.0243,-1.15523 0.0714,-2.36603 0.0801,-3.63476 v -0.0234 -3.87891 c 0,-0.0399 -6.4e-4,-0.0793 0,-0.11914 l -0.11524,-3.29296 v -0.002 -0.002 -0.006 -0.002 l -0.0645,-1.64649 c -6.3e-4,-0.009 0,-0.0184 0,-0.0273 l -0.0391,-0.83985 c 0,-0.0331 7.4e-4,-0.0667 -0.01,-0.0996 l -0.0723,-0.95313 c -6.3e-4,-0.007 0,-0.0158 0,-0.0234 l -0.31445,-3.81054 c -6.4e-4,-0.007 0,-0.0139 0,-0.0215 l -0.16797,-1.89648 c 0,-0.0462 -0.0112,-0.0906 -0.0156,-0.13672 l -0.23828,-1.81445 c -7.6e-4,-0.005 0,-0.0121 0,-0.0176 l -0.49024,-3.625 c -7.3e-4,-0.003 0,-0.005 0,-0.008 -0.19138,-1.38334 -0.46564,-2.62185 -0.66211,-3.73046 -0.87863,-5.01385 -2.19539,-9.88885 -3.62695,-14.64649 0,-0.0146 -0.0112,-0.0304 -0.0156,-0.0449 -3.04827,-9.65999 -7.41576,-18.89699 -12.79882,-27.44727 -0.018,-0.0277 -0.0369,-0.0547 -0.0547,-0.082 l -2.05274,-3.06445 c 0,-0.005 -0.01,-0.009 -0.01,-0.0137 l -1.03516,-1.52539 c -0.0284,-0.0425 -0.0574,-0.0857 -0.0879,-0.12696 l -1.10547,-1.47851 c 0,-0.003 7.4e-4,-0.006 -0.01,-0.01 l -2.21094,-2.94531 c -0.0339,-0.0442 -0.0676,-0.0864 -0.10352,-0.12891 l -2.35351,-2.83789 c 0,-0.003 7.3e-4,-0.004 -0.01,-0.008 l -1.17969,-1.41211 c -0.0339,-0.0406 -0.0685,-0.0801 -0.10546,-0.11914 l -1.24414,-1.35742 c 0,-0.002 6.3e-4,-0.004 -0.01,-0.006 l -2.49414,-2.70313 c -0.0361,-0.0386 -0.0716,-0.0764 -0.10938,-0.11328 l -2.61328,-2.58203 c 0,-0.005 -0.009,-0.011 -0.0137,-0.0156 l -1.3164,-1.28321 c -0.0361,-0.0346 -0.0717,-0.0687 -0.10938,-0.10156 l -1.31641,-1.17578 c -3.76837,-3.51342 -7.8241,-6.51585 -11.8125,-9.375 -0.0401,-0.0291 -0.0816,-0.0567 -0.12304,-0.084 -1.96334,-1.27967 -4.00588,-2.74138 -6.33203,-4.05664 -0.98664,-0.57806 -2.02678,-1.22416 -3.17774,-1.85938 -0.018,-0.01 -0.0369,-0.0201 -0.0547,-0.0293 l -3.20898,-1.70117 c -0.0104,-0.005 -0.022,-0.0101 -0.0312,-0.0156 -8.89579,-4.58494 -18.32335,-7.97917 -27.95117,-10.26953 -0.0371,-0.009 -0.0738,-0.0178 -0.11133,-0.0254 -2.24277,-0.45408 -4.64158,-1.07858 -7.26953,-1.45898 l -3.5,-0.57617 c -0.0496,-0.009 -0.0991,-0.0138 -0.14844,-0.0195 l -3.49805,-0.41797 c -2.62935,-0.37933 -5.09712,-0.45726 -7.36914,-0.65625 -0.0371,-0.003 -0.0738,-0.004 -0.11132,-0.006 -1.29218,-0.0703 -2.51543,-0.0859 -3.66797,-0.125 -0.0105,-2e-5 -0.0132,-2e-5 -0.0195,0 l -1.79883,-0.0508 -0.44922,-0.0117 c -0.0273,-9.8e-4 -0.0545,-0.002 -0.082,-0.002 l -0.625,-0.002 c -0.0117,-8e-5 -0.0235,-8e-5 -0.0352,0 l -0.82617,0.006 -3.29492,0.0254 c -0.0412,6.1e-4 -0.0817,0.002 -0.12305,0.004 l -3.70117,0.16016 c -1.35314,0.0493 -2.60186,0.15466 -3.78516,0.25976 -0.0104,-2e-5 -0.0133,-2e-5 -0.0195,0 -1.08906,0.10241 -2.30853,0.17172 -3.63281,0.33789 -4.88182,0.5222 -9.66226,1.35576 -14.36719,2.29492 -0.0128,0.003 -0.0265,0.004 -0.0391,0.008 -19.044,4.02453 -36.90451,11.66929 -53.23242,21.30273 -16.40471,9.62428 -31.23104,21.43909 -44.73828,34.43555 0,0.003 -0.01,0.006 -0.01,0.01 -13.48466,13.06909 -25.57931,27.50398 -36.19727,42.99805 v 0.002 c -10.60369,15.50124 -19.74906,32.11001 -26.96093,49.72071 -7.24674,17.58836 -12.57849,36.2215 -15.15235,55.66601 v 0.002 c -0.6401,4.8615 -1.07491,9.77374 -1.3164,14.7168 -3.1e-4,0.005 3.2e-4,0.009 0,0.0137 -3.1e-4,0.006 0,0.0134 0,0.0195 -0.14457,2.50724 -0.19132,4.98947 -0.22852,7.43165 v 0.0195 l -0.01,1.06445 c -1.1e-4,0.0111 -1e-4,0.022 0,0.0332 v 0.82422 0.0195 l 0.01,1.64844 v 0.01 l 0.0156,1.64843 v 0.0195 l 0.0137,0.82618 c 6.3e-4,0.0138 0,0.027 0,0.041 l 0.0234,0.90625 c 0.1195,4.94908 0.33403,9.61489 0.69726,14.39453 v 0.002 c 0.36237,4.7465 0.83111,9.50846 1.4707,14.27539 1.25866,9.51375 3.11867,18.98123 5.52344,28.33789 0,0.007 -6.3e-4,0.0158 0.01,0.0234 2.47356,9.35904 5.54674,18.60521 9.29101,27.63671 v 0.004 c 3.76002,9.02845 8.20437,17.81305 13.30664,26.23828 0,0.003 0.001,0.008 0.0117,0.0117 5.13926,8.41831 10.97699,16.43374 17.41992,23.94336 0,0.004 0.0114,0.007 0.0137,0.0117 0.5768,0.66557 1.18363,1.30352 1.76953,1.96094 -19.45382,7.34897 -49.79228,17.00234 -77.66797,18.71093 A 291,291 0 0 1 109,652.36218 a 291,291 0 0 1 291,-291 291,291 0 0 1 291,291 291,291 0 0 1 -0.90039,11.44727 198.29802,198.29802 0 0 1 29.88867,30.66406 323,323 0 0 0 3.01172,-42.11133 323,323 0 0 0 -323,-323 z m -20.0332,95.47852 h 0.041 c 0.0138,-2.2e-4 0.0263,2.4e-4 0.0391,0 l 0.37304,0.006 1.49024,0.0254 -0.0176,-0.002 c 1.05618,0.025 2.0224,0.0217 2.89648,0.0586 2.0984,0.16601 4.00765,0.19756 5.66406,0.42578 0.0233,0.003 0.0471,0.006 0.0703,0.01 l 2.88281,0.33399 2.86133,0.47265 c 0.0264,0.004 0.0535,0.0103 0.0801,0.0137 1.67727,0.23608 3.5023,0.69951 5.51562,1.11523 14.80916,3.61716 28.58591,11.17051 39.0332,21.81055 0.0128,0.0133 0.0264,0.0261 0.0391,0.0391 l 0.97851,0.96289 0.92578,1.01172 v 0.004 l 1.90821,2.08594 1.79883,2.1836 0.86523,1.05468 0.81641,1.09961 v 0.002 l 1.67968,2.26757 1.5586,2.35157 c 0,0.003 -7.4e-4,0.006 0.01,0.01 l 0.75586,1.13281 0.69531,1.17188 v 0.002 l 1.44141,2.42774 c 3.60668,6.50443 6.36951,13.47145 8.31055,20.69531 0.92788,3.71695 1.7556,7.37086 2.2207,11.02344 6.5e-4,0.003 0,0.006 0,0.01 0.14215,1.09056 0.30804,2.00199 0.37695,2.76563 6.4e-4,0.009 0,0.0152 0,0.0234 l 0.28516,2.92187 c 6.6e-4,0.005 0,0.0101 0,0.0156 l 0.14062,1.375 0.0684,1.30859 v 0.002 l 0.14649,2.76367 c 6.2e-4,0.007 0,0.0147 0,0.0215 l 0.0371,0.61328 0.01,0.7168 0.0137,1.63476 v 0.0176 l 0.0391,3.23047 -0.0703,2.61523 -0.13086,2.93164 c -0.22405,3.91638 -0.58953,7.81958 -1.13282,11.69727 -7.5e-4,0.003 0,0.008 0,0.0117 -2.13402,15.55764 -7.00981,30.90512 -13.66992,45.66211 -6.71886,14.74041 -15.24737,28.87274 -24.99219,42.28711 -9.75222,13.42118 -20.73372,26.11503 -32.52929,38.11523 -11.80644,11.99967 -24.42595,23.30741 -37.63086,33.95117 v 0.002 c -13.19055,10.65172 -27.00838,20.59092 -41.27539,29.85547 -17.42527,11.27957 -35.54144,21.52459 -54.14063,30.62109 -3.48409,-3.46655 -6.87958,-7.02644 -9.98437,-10.8418 v -0.006 c 0,-0.003 -0.01,-0.006 -0.01,-0.01 -2.40423,-2.98981 -4.69554,-6.07558 -6.875,-9.24414 l -0.01,-0.01 c -2.15927,-3.16074 -4.18555,-6.44509 -6.13672,-9.80273 v -0.006 c -3.86548,-6.68322 -7.22177,-13.70415 -10.09766,-20.96094 v -0.002 c -5.76944,-14.51096 -9.57305,-29.97721 -11.59765,-45.82422 v -0.0254 c -0.53232,-3.93999 -0.92669,-7.92606 -1.23633,-11.94336 v -0.002 c -0.30615,-3.95336 -0.49031,-8.06034 -0.58985,-11.88085 v -0.004 l -0.0801,-6.19141 v -0.0273 c 0.016,-1.94902 0.0249,-3.83839 0.11719,-5.68555 8.3e-4,-0.0146 0,-0.0284 0,-0.043 0.14392,-3.81686 0.45507,-7.65896 0.91797,-11.51367 v -0.0273 c 1.72893,-15.46261 5.7058,-31.04326 11.16992,-46.25391 v -0.01 c 2.7609,-7.60629 5.86203,-15.12338 9.37305,-22.46094 0,-0.009 0.0113,-0.0184 0.0137,-0.0274 3.44603,-7.36199 7.33957,-14.56513 11.5,-21.65429 l 0.01,-0.01 c 8.3335,-14.10058 18.05088,-27.44318 28.99023,-39.65625 l 0.0117,-0.0117 c 5.49672,-6.08202 11.2723,-11.89004 17.38867,-17.23632 0,-0.003 0.01,-0.004 0.01,-0.008 6.12979,-5.39258 12.52738,-10.4219 19.24023,-14.88281 0,-9.9e-4 -7.3e-4,-0.003 0.01,-0.004 13.41703,-8.95312 28.06841,-15.88983 43.32617,-19.61328 0,-5e-4 -7.3e-4,-9.4e-4 0.01,-0.002 3.82869,-0.91266 7.67155,-1.65821 11.51367,-2.16211 0.0253,-0.003 0.0507,-0.007 0.0762,-0.0117 0.81142,-0.1251 1.76959,-0.19872 2.86328,-0.32812 l 0.0117,-0.002 c 0.97976,-0.11303 1.914,-0.21017 2.71875,-0.2539 0.0191,-5.5e-4 0.0376,-9.6e-4 0.0566,-0.002 l 2.81055,-0.19921 3.22851,-0.10157 z m 184.09765,228.36328 c -90.48492,0 -163.68945,73.20453 -163.68945,163.68945 0,90.48492 73.20453,163.68945 163.68945,163.68945 90.48492,0 163.68946,-73.20453 163.68946,-163.68945 0,-90.48492 -73.20454,-163.68945 -163.68946,-163.68945 z m 0,24.96484 c 76.72957,0 138.72461,61.99504 138.72461,138.72461 0,76.72957 -61.99504,138.72461 -138.72461,138.72461 -76.72956,0 -138.72461,-61.99504 -138.72461,-138.72461 0,-76.72957 61.99505,-138.72461 138.72461,-138.72461 z m 1.28907,27.83789 c -14.37479,0 -25.80469,11.18928 -25.80469,25.20117 0,14.01189 11.4299,25.82617 25.80469,25.82617 14.37478,0 25.84765,-11.81428 25.84765,-25.82617 0,-14.01189 -11.47287,-25.20117 -25.84765,-25.20117 z m 92.45898,52.09766 -93.70703,15.32031 -92.61914,-15.11914 a 6.2499063,6.2499063 0 0 0 -3.77149,0.62305 7.2781167,7.2781167 0 0 0 -4.43554,6.29296 c -0.0202,2.72173 1.91602,5.03846 4.43554,6.3086 l 69.29297,21.41211 -0.625,49.79883 -24.57422,73.68554 c -2.35884,3.36689 -1.63364,7.21854 1.89453,9.47657 3.52818,2.21771 8.98946,1.45218 11.32813,-1.89454 l 39.07422,-79.39453 39.05273,79.39453 a 7.3990826,7.3990826 0 0 0 10.07813,2.51954 c 3.6693,-2.01609 5.24259,-5.98872 3.16601,-9.47657 l -23.95117,-74.33203 -1.25,-45.98633 70.56445,-25.20312 a 7.4192436,7.4192436 0 0 0 2.51954,-8.83008 c -1.22982,-3.06447 -4.75703,-4.77714 -6.47071,-4.5957 z" />
    </mask>
    <filter
       style="color-interpolation-filters:sRGB"
       id="filter10304-5"
       x="-0.027389603"
       y="-0.027369972"
       width="1.0547792"
       height="1.0547399">
      <feGaussianBlur
         stdDeviation="7.4266214"
         id="feGaussianBlur10304-3" />
    </filter>
  </defs>
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1"
     transform="translate(0,-252.36218)">
    <path
       id="path909"
       style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#3689e6;fill-opacity:1;stroke-width:4.62852;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
       d="M 0,252.36218 V 652.36217 1052.3621 H 399.99999 799.99998 V 652.36217 252.36218 H 399.99999 Z" />
    <path
       id="path7-3-4"
       style="font-variation-settings:normal;opacity:0.117923;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:4.62853;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;filter:url(#filter10304-5);stop-color:#000000;stop-opacity:1"
       d="m 397.62306,346.75183 a 323,323 0 0 0 -323.000006,323 323,323 0 0 0 323.000006,322.99997 323,323 0 0 0 41.7168,-2.98239 198.29802,198.29802 0 0 1 -30.70118,-29.88477 291,291 0 0 1 -11.01562,0.86719 291,291 0 0 1 -231.81641,-115.73242 c 27.77861,-5.93118 55.01715,-15.56955 84.63282,-29.125 4.04756,2.78173 8.2109,5.40215 12.49023,7.81445 0,9.9e-4 -6.3e-4,0.003 0.01,0.004 0,9.8e-4 0.01,0.002 0.01,0.004 17.15749,9.78362 35.81519,16.43988 54.7461,20.25196 l 0.01,0.002 c 10.00342,1.99584 19.20948,3.15602 28.51172,3.7207 0,1.8e-4 0.01,-1.8e-4 0.01,0 9.23374,0.63001 17.90395,0.53195 28.2539,0.0879 0.0105,1e-5 0.0112,1e-5 0.0176,0 l -0.9375,-33.93164 -0.0156,-0.002 c -16.88237,0.0938 -31.75117,-1.23425 -47.9961,-5.19727 v -0.002 c -12.2072,-3.00211 -23.86504,-7.52439 -34.74414,-13.30664 14.01243,-7.79265 27.72049,-16.08777 41.04102,-24.95312 0,-0.002 0.01,-0.004 0.01,-0.006 30.10126,-20.1823 58.64514,-42.96671 84.19336,-69.25 12.76302,-13.13677 24.77962,-27.15592 35.61133,-42.23633 v -0.002 c 5.429,-7.53698 10.53508,-15.35233 15.27344,-23.42968 v -0.0117 c 4.71927,-8.10254 9.03467,-16.49236 12.87109,-25.15625 v -0.004 c 7.65964,-17.3454 13.25791,-35.9492 15.62695,-55.27344 v -0.002 c 0.58885,-4.81719 0.9964,-9.67879 1.15821,-14.57422 7.4e-4,-0.0138 0,-0.029 0,-0.043 0.0243,-1.15523 0.0714,-2.36603 0.0801,-3.63476 v -0.0234 -3.87891 c 0,-0.0399 -6.4e-4,-0.0793 0,-0.11914 l -0.11524,-3.29296 v -0.002 -0.002 -0.006 -0.002 l -0.0645,-1.64649 c -6.3e-4,-0.009 0,-0.0184 0,-0.0273 l -0.0391,-0.83985 c 0,-0.0331 7.4e-4,-0.0667 -0.01,-0.0996 l -0.0723,-0.95313 c -6.3e-4,-0.007 0,-0.0158 0,-0.0234 l -0.31445,-3.81054 c -6.4e-4,-0.007 0,-0.0139 0,-0.0215 l -0.16797,-1.89648 c 0,-0.0462 -0.0112,-0.0906 -0.0156,-0.13672 l -0.23828,-1.81445 c -7.6e-4,-0.005 0,-0.0121 0,-0.0176 l -0.49024,-3.625 c -7.3e-4,-0.003 0,-0.005 0,-0.008 -0.19138,-1.38334 -0.46564,-2.62185 -0.66211,-3.73046 -0.87863,-5.01385 -2.19539,-9.88885 -3.62695,-14.64649 0,-0.0146 -0.0112,-0.0304 -0.0156,-0.0449 -3.04827,-9.65999 -7.41576,-18.89699 -12.79882,-27.44727 -0.018,-0.0277 -0.0369,-0.0547 -0.0547,-0.082 l -2.05274,-3.06445 c 0,-0.005 -0.01,-0.009 -0.01,-0.0137 l -1.03516,-1.52539 c -0.0284,-0.0425 -0.0574,-0.0857 -0.0879,-0.12696 l -1.10547,-1.47851 c 0,-0.003 7.4e-4,-0.006 -0.01,-0.01 l -2.21094,-2.94531 c -0.0339,-0.0442 -0.0676,-0.0864 -0.10352,-0.12891 l -2.35351,-2.83789 c 0,-0.003 7.3e-4,-0.004 -0.01,-0.008 l -1.17969,-1.41211 c -0.0339,-0.0406 -0.0685,-0.0801 -0.10546,-0.11914 l -1.24414,-1.35742 c 0,-0.002 6.3e-4,-0.004 -0.01,-0.006 l -2.49414,-2.70313 c -0.0361,-0.0386 -0.0716,-0.0764 -0.10938,-0.11328 l -2.61328,-2.58203 c 0,-0.005 -0.009,-0.011 -0.0137,-0.0156 l -1.3164,-1.28321 c -0.0361,-0.0346 -0.0717,-0.0687 -0.10938,-0.10156 l -1.31641,-1.17578 c -3.76837,-3.51342 -7.8241,-6.51585 -11.8125,-9.375 -0.0401,-0.0291 -0.0816,-0.0567 -0.12304,-0.084 -1.96334,-1.27967 -4.00588,-2.74138 -6.33203,-4.05664 -0.98664,-0.57806 -2.02678,-1.22416 -3.17774,-1.85938 -0.018,-0.01 -0.0369,-0.0201 -0.0547,-0.0293 l -3.20898,-1.70117 c -0.0104,-0.005 -0.022,-0.0101 -0.0312,-0.0156 -8.89579,-4.58494 -18.32335,-7.97917 -27.95117,-10.26953 -0.0371,-0.009 -0.0738,-0.0178 -0.11133,-0.0254 -2.24277,-0.45408 -4.64158,-1.07858 -7.26953,-1.45898 l -3.5,-0.57617 c -0.0496,-0.009 -0.0991,-0.0138 -0.14844,-0.0195 l -3.49805,-0.41797 c -2.62935,-0.37933 -5.09712,-0.45726 -7.36914,-0.65625 -0.0371,-0.003 -0.0738,-0.004 -0.11132,-0.006 -1.29218,-0.0703 -2.51543,-0.0859 -3.66797,-0.125 -0.0105,-2e-5 -0.0132,-2e-5 -0.0195,0 l -1.79883,-0.0508 -0.44922,-0.0117 c -0.0273,-9.8e-4 -0.0545,-0.002 -0.082,-0.002 l -0.625,-0.002 c -0.0117,-8e-5 -0.0235,-8e-5 -0.0352,0 l -0.82617,0.006 -3.29492,0.0254 c -0.0412,6.1e-4 -0.0817,0.002 -0.12305,0.004 l -3.70117,0.16016 c -1.35314,0.0493 -2.60186,0.15466 -3.78516,0.25976 -0.0104,-2e-5 -0.0133,-2e-5 -0.0195,0 -1.08906,0.10241 -2.30853,0.17172 -3.63281,0.33789 -4.88182,0.5222 -9.66226,1.35576 -14.36719,2.29492 -0.0128,0.003 -0.0265,0.004 -0.0391,0.008 -19.044,4.02453 -36.90451,11.66929 -53.23242,21.30273 -16.40471,9.62428 -31.23104,21.43909 -44.73828,34.43555 0,0.003 -0.01,0.006 -0.01,0.01 -13.48466,13.06909 -25.57931,27.50398 -36.19727,42.99805 v 0.002 c -10.60369,15.50124 -19.74906,32.11001 -26.96093,49.72071 -7.24674,17.58836 -12.57849,36.2215 -15.15235,55.66601 v 0.002 c -0.6401,4.8615 -1.07491,9.77374 -1.3164,14.7168 -3.1e-4,0.005 3.2e-4,0.009 0,0.0137 -3.1e-4,0.006 0,0.0134 0,0.0195 -0.14457,2.50724 -0.19132,4.98947 -0.22852,7.43165 v 0.0195 l -0.01,1.06445 c -1.1e-4,0.0111 -1e-4,0.022 0,0.0332 v 0.82422 0.0195 l 0.01,1.64844 v 0.01 l 0.0156,1.64843 v 0.0195 l 0.0137,0.82618 c 6.3e-4,0.0138 0,0.027 0,0.041 l 0.0234,0.90625 c 0.1195,4.94908 0.33403,9.61489 0.69726,14.39453 v 0.002 c 0.36237,4.7465 0.83111,9.50846 1.4707,14.27539 1.25866,9.51375 3.11867,18.98123 5.52344,28.33789 0,0.007 -6.3e-4,0.0158 0.01,0.0234 2.47356,9.35904 5.54674,18.60521 9.29101,27.63671 v 0.004 c 3.76002,9.02845 8.20437,17.81305 13.30664,26.23828 0,0.003 0.001,0.008 0.0117,0.0117 5.13926,8.41831 10.97699,16.43374 17.41992,23.94336 0,0.004 0.0114,0.007 0.0137,0.0117 0.5768,0.66557 1.18363,1.30352 1.76953,1.96094 -19.45382,7.34897 -49.79228,17.00234 -77.66797,18.71093 a 291,291 0 0 1 -34.76754,-137.08951 291,291 0 0 1 291,-291 291,291 0 0 1 291,291 291,291 0 0 1 -0.90039,11.44727 198.29802,198.29802 0 0 1 29.88867,30.66406 323,323 0 0 0 3.01172,-42.11133 323,323 0 0 0 -323,-323 z m -20.0332,95.47852 h 0.041 c 0.0138,-2.2e-4 0.0263,2.4e-4 0.0391,0 l 0.37304,0.006 1.49024,0.0254 -0.0176,-0.002 c 1.05618,0.025 2.0224,0.0217 2.89648,0.0586 2.0984,0.16601 4.00765,0.19756 5.66406,0.42578 0.0233,0.003 0.0471,0.006 0.0703,0.01 l 2.88281,0.33399 2.86133,0.47265 c 0.0264,0.004 0.0535,0.0103 0.0801,0.0137 1.67727,0.23608 3.5023,0.69951 5.51562,1.11523 14.80916,3.61716 28.58591,11.17051 39.0332,21.81055 0.0128,0.0133 0.0264,0.0261 0.0391,0.0391 l 0.97851,0.96289 0.92578,1.01172 v 0.004 l 1.90821,2.08594 1.79883,2.1836 0.86523,1.05468 0.81641,1.09961 v 0.002 l 1.67968,2.26757 1.5586,2.35157 c 0,0.003 -7.4e-4,0.006 0.01,0.01 l 0.75586,1.13281 0.69531,1.17188 v 0.002 l 1.44141,2.42774 c 3.60668,6.50443 6.36951,13.47145 8.31055,20.69531 0.92788,3.71695 1.7556,7.37086 2.2207,11.02344 6.5e-4,0.003 0,0.006 0,0.01 0.14215,1.09056 0.30804,2.00199 0.37695,2.76563 6.4e-4,0.009 0,0.0152 0,0.0234 l 0.28516,2.92187 c 6.6e-4,0.005 0,0.0101 0,0.0156 l 0.14062,1.375 0.0684,1.30859 v 0.002 l 0.14649,2.76367 c 6.2e-4,0.007 0,0.0147 0,0.0215 l 0.0371,0.61328 0.01,0.7168 0.0137,1.63476 v 0.0176 l 0.0391,3.23047 -0.0703,2.61523 -0.13086,2.93164 c -0.22405,3.91638 -0.58953,7.81958 -1.13282,11.69727 -7.5e-4,0.003 0,0.008 0,0.0117 -2.13402,15.55764 -7.00981,30.90512 -13.66992,45.66211 -6.71886,14.74041 -15.24737,28.87274 -24.99219,42.28711 -9.75222,13.42118 -20.73372,26.11503 -32.52929,38.11523 -11.80644,11.99967 -24.42595,23.30741 -37.63086,33.95117 v 0.002 c -13.19055,10.65172 -27.00838,20.59092 -41.27539,29.85547 -17.42527,11.27957 -35.54144,21.52459 -54.14063,30.62109 -3.48409,-3.46655 -6.87958,-7.02644 -9.98437,-10.8418 v -0.006 c 0,-0.003 -0.01,-0.006 -0.01,-0.01 -2.40423,-2.98981 -4.69554,-6.07558 -6.875,-9.24414 l -0.01,-0.01 c -2.15927,-3.16074 -4.18555,-6.44509 -6.13672,-9.80273 v -0.006 c -3.86548,-6.68322 -7.22177,-13.70415 -10.09766,-20.96094 v -0.002 c -5.76944,-14.51096 -9.57305,-29.97721 -11.59765,-45.82422 v -0.0254 c -0.53232,-3.93999 -0.92669,-7.92606 -1.23633,-11.94336 v -0.002 c -0.30615,-3.95336 -0.49031,-8.06034 -0.58985,-11.88085 v -0.004 l -0.0801,-6.19141 v -0.0273 c 0.016,-1.94902 0.0249,-3.83839 0.11719,-5.68555 8.3e-4,-0.0146 0,-0.0284 0,-0.043 0.14392,-3.81686 0.45507,-7.65896 0.91797,-11.51367 v -0.0273 c 1.72893,-15.46261 5.7058,-31.04326 11.16992,-46.25391 v -0.01 c 2.7609,-7.60629 5.86203,-15.12338 9.37305,-22.46094 0,-0.009 0.0113,-0.0184 0.0137,-0.0274 3.44603,-7.36199 7.33957,-14.56513 11.5,-21.65429 l 0.01,-0.01 c 8.3335,-14.10058 18.05088,-27.44318 28.99023,-39.65625 l 0.0117,-0.0117 c 5.49672,-6.08202 11.2723,-11.89004 17.38867,-17.23632 0,-0.003 0.01,-0.004 0.01,-0.008 6.12979,-5.39258 12.52738,-10.4219 19.24023,-14.88281 0,-9.9e-4 -7.3e-4,-0.003 0.01,-0.004 13.41703,-8.95312 28.06841,-15.88983 43.32617,-19.61328 0,-5e-4 -7.3e-4,-9.4e-4 0.01,-0.002 3.82869,-0.91266 7.67155,-1.65821 11.51367,-2.16211 0.0253,-0.003 0.0507,-0.007 0.0762,-0.0117 0.81142,-0.1251 1.76959,-0.19872 2.86328,-0.32812 l 0.0117,-0.002 c 0.97976,-0.11303 1.914,-0.21017 2.71875,-0.2539 0.0191,-5.5e-4 0.0376,-9.6e-4 0.0566,-0.002 l 2.81055,-0.19921 3.22851,-0.10157 z m 184.09765,228.36328 c -90.48492,0 -163.68945,73.20453 -163.68945,163.68945 0,90.48492 73.20453,163.68942 163.68945,163.68942 90.48492,0 163.68946,-73.2045 163.68946,-163.68942 0,-90.48492 -73.20454,-163.68945 -163.68946,-163.68945 z m 0,24.96484 c 76.72957,0 138.72461,61.99504 138.72461,138.72461 0,76.72957 -61.99504,138.72461 -138.72461,138.72461 -76.72956,0 -138.72461,-61.99504 -138.72461,-138.72461 0,-76.72957 61.99505,-138.72461 138.72461,-138.72461 z m 1.28907,27.83789 c -14.37479,0 -25.80469,11.18928 -25.80469,25.20117 0,14.01189 11.4299,25.82617 25.80469,25.82617 14.37478,0 25.84765,-11.81428 25.84765,-25.82617 0,-14.01189 -11.47287,-25.20117 -25.84765,-25.20117 z m 92.45898,52.09766 -93.70703,15.32031 -92.61914,-15.11914 a 6.2499063,6.2499063 0 0 0 -3.77149,0.62305 7.2781167,7.2781167 0 0 0 -4.43554,6.29296 c -0.0202,2.72173 1.91602,5.03846 4.43554,6.3086 l 69.29297,21.41211 -0.625,49.79883 -24.57422,73.68554 c -2.35884,3.36689 -1.63364,7.21854 1.89453,9.47657 3.52818,2.21771 8.98946,1.45218 11.32813,-1.89454 l 39.07422,-79.39453 39.05273,79.39453 a 7.3990826,7.3990826 0 0 0 10.07813,2.51954 c 3.6693,-2.01609 5.24259,-5.98872 3.16601,-9.47657 l -23.95117,-74.33203 -1.25,-45.98633 70.56445,-25.20312 a 7.4192436,7.4192436 0 0 0 2.51954,-8.83008 c -1.22982,-3.06447 -4.75703,-4.77714 -6.47071,-4.5957 z" />
    <script
       id="mesh_polyfill"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
    <script
       id="mesh_polyfill-4"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
    <path
       id="path7"
       style="opacity:1;fill:#dfdfdf;stroke:none;stroke-width:4.62851988;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;font-variation-settings:normal;vector-effect:none;fill-opacity:1;stroke-linecap:butt;stroke-miterlimit:4;stroke-dashoffset:0;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
       d="M 400 329.36218 A 323 323 0 0 0 77 652.36218 A 323 323 0 0 0 400 975.36218 A 323 323 0 0 0 441.7168 972.37976 A 198.29802 198.29802 0 0 1 411.01562 942.49499 A 291 291 0 0 1 400 943.36218 A 291 291 0 0 1 168.18359 827.62976 C 195.9622 821.69858 223.20074 812.06021 252.81641 798.50476 C 256.86397 801.28649 261.02731 803.90691 265.30664 806.31921 C 265.30664 806.3202 265.30601 806.32212 265.31641 806.32312 C 265.31641 806.3241 265.32617 806.32502 265.32617 806.32702 C 282.48366 816.11064 301.14136 822.7669 320.07227 826.57898 L 320.08203 826.58093 C 330.08545 828.57677 339.29151 829.73695 348.59375 830.30163 C 348.59375 830.30181 348.60352 830.30145 348.60352 830.30163 C 357.83726 830.93164 366.50747 830.83358 376.85742 830.38952 C 376.86792 830.38953 376.8686 830.38953 376.875 830.38952 L 375.9375 796.45788 L 375.92188 796.45593 C 359.03951 796.54973 344.17071 795.22168 327.92578 791.25866 L 327.92578 791.25671 C 315.71858 788.2546 304.06074 783.73232 293.18164 777.95007 C 307.19407 770.15742 320.90213 761.8623 334.22266 752.99695 C 334.22266 752.99495 334.23242 752.99309 334.23242 752.99109 C 364.33368 732.80879 392.87756 710.02438 418.42578 683.74109 C 431.1888 670.60432 443.2054 656.58517 454.03711 641.50476 L 454.03711 641.5028 C 459.46611 633.96582 464.57219 626.15047 469.31055 618.07312 L 469.31055 618.0614 C 474.02982 609.95886 478.34522 601.56904 482.18164 592.90515 L 482.18164 592.90124 C 489.84128 575.55584 495.43955 556.95204 497.80859 537.6278 L 497.80859 537.62585 C 498.39744 532.80866 498.80499 527.94706 498.9668 523.05163 C 498.96754 523.03783 498.9668 523.02266 498.9668 523.00866 C 498.9911 521.85343 499.03818 520.64263 499.04688 519.3739 L 499.04688 519.35046 L 499.04688 515.47155 C 499.04688 515.43165 499.04624 515.39223 499.04688 515.35241 L 498.93164 512.05945 L 498.93164 512.05749 L 498.93164 512.05554 L 498.93164 512.04968 L 498.93164 512.04773 L 498.86719 510.40124 C 498.86656 510.39224 498.86719 510.3828 498.86719 510.3739 L 498.82812 509.53405 C 498.82812 509.50095 498.82886 509.46735 498.81836 509.43445 L 498.74609 508.48132 C 498.74546 508.47432 498.74609 508.46548 498.74609 508.45788 L 498.43164 504.64734 C 498.431 504.64034 498.43164 504.63345 498.43164 504.62585 L 498.26367 502.72937 C 498.26367 502.68317 498.25245 502.63874 498.24805 502.59265 L 498.00977 500.7782 C 498.00901 500.7732 498.00977 500.76612 498.00977 500.76062 L 497.51953 497.13562 C 497.5188 497.13262 497.51953 497.13081 497.51953 497.1278 C 497.32815 495.74446 497.05389 494.50595 496.85742 493.39734 C 495.97879 488.38349 494.66203 483.50849 493.23047 478.75085 C 493.23047 478.73625 493.21924 478.72043 493.21484 478.70593 C 490.16657 469.04594 485.79908 459.80894 480.41602 451.25866 C 480.39802 451.23096 480.37913 451.20393 480.36133 451.17663 L 478.30859 448.11218 C 478.30859 448.10718 478.29883 448.10311 478.29883 448.09851 L 477.26367 446.57312 C 477.23527 446.53062 477.20628 446.48746 477.17578 446.44616 L 476.07031 444.96765 C 476.07031 444.96465 476.07105 444.96188 476.06055 444.95788 L 473.84961 442.01257 C 473.81571 441.96837 473.78196 441.9262 473.74609 441.88366 L 471.39258 439.04577 C 471.39258 439.04277 471.39331 439.04196 471.38281 439.03796 L 470.20312 437.62585 C 470.16922 437.58525 470.13462 437.54572 470.09766 437.50671 L 468.85352 436.14929 C 468.85352 436.14729 468.85415 436.14543 468.84375 436.14343 L 466.34961 433.4403 C 466.31351 433.4017 466.27803 433.36392 466.24023 433.32702 L 463.62695 430.74499 C 463.62695 430.73999 463.61768 430.73397 463.61328 430.72937 L 462.29688 429.44616 C 462.26078 429.41156 462.22519 429.37744 462.1875 429.3446 L 460.87109 428.16882 C 457.10272 424.6554 453.04699 421.65297 449.05859 418.79382 C 449.01849 418.76472 448.977 418.73714 448.93555 418.70984 C 446.97221 417.43017 444.92967 415.96846 442.60352 414.6532 C 441.61688 414.07514 440.57674 413.42904 439.42578 412.79382 C 439.40778 412.78382 439.38889 412.77372 439.37109 412.76452 L 436.16211 411.06335 C 436.15171 411.05835 436.14016 411.05323 436.13086 411.04773 C 427.23507 406.46279 417.80751 403.06856 408.17969 400.7782 C 408.14259 400.7692 408.10584 400.76042 408.06836 400.7528 C 405.82559 400.29872 403.42678 399.67422 400.79883 399.29382 L 397.29883 398.71765 C 397.24923 398.70865 397.19969 398.70382 397.15039 398.69812 L 393.65234 398.28015 C 391.02299 397.90082 388.55522 397.82289 386.2832 397.6239 C 386.2461 397.6209 386.20943 397.62004 386.17188 397.61804 C 384.8797 397.54774 383.65645 397.53214 382.50391 397.49304 C 382.49341 397.49302 382.49068 397.49302 382.48438 397.49304 L 380.68555 397.44226 L 380.23633 397.43054 C 380.20903 397.42956 380.1818 397.42859 380.1543 397.42859 L 379.5293 397.42663 C 379.5176 397.42655 379.50584 397.42655 379.49414 397.42663 L 378.66797 397.43249 L 375.37305 397.45788 C 375.33185 397.45849 375.29134 397.45979 375.25 397.46179 L 371.54883 397.62195 C 370.19569 397.67125 368.94697 397.77661 367.76367 397.88171 C 367.75327 397.88169 367.75034 397.88169 367.74414 397.88171 C 366.65508 397.98412 365.43561 398.05343 364.11133 398.2196 C 359.22951 398.7418 354.44907 399.57536 349.74414 400.51452 C 349.73134 400.51752 349.71768 400.51834 349.70508 400.52234 C 330.66108 404.54687 312.80057 412.19163 296.47266 421.82507 C 280.06795 431.44935 265.24162 443.26416 251.73438 456.26062 C 251.73438 456.26362 251.72461 456.26638 251.72461 456.27038 C 238.23995 469.33947 226.1453 483.77436 215.52734 499.26843 L 215.52734 499.27038 C 204.92365 514.77162 195.77828 531.38039 188.56641 548.99109 C 181.31967 566.57945 175.98792 585.21259 173.41406 604.6571 L 173.41406 604.65905 C 172.77396 609.52055 172.33915 614.43279 172.09766 619.37585 C 172.09735 619.38085 172.09798 619.38492 172.09766 619.38952 C 172.09735 619.39552 172.09766 619.40288 172.09766 619.40905 C 171.95309 621.91629 171.90634 624.39852 171.86914 626.8407 L 171.86914 626.86023 L 171.85938 627.92468 C 171.85927 627.93578 171.85928 627.94668 171.85938 627.95788 L 171.85938 628.7821 L 171.85938 628.80163 L 171.86914 630.45007 L 171.86914 630.45984 L 171.88477 632.10827 L 171.88477 632.1278 L 171.89844 632.95398 C 171.89907 632.96778 171.89844 632.98099 171.89844 632.99499 L 171.92188 633.90124 C 172.04138 638.85032 172.25591 643.51613 172.61914 648.29577 L 172.61914 648.29773 C 172.98151 653.04423 173.45025 657.80619 174.08984 662.57312 C 175.3485 672.08687 177.20851 681.55435 179.61328 690.91101 C 179.61328 690.91801 179.61265 690.92685 179.62305 690.93445 C 182.09661 700.29349 185.16979 709.53966 188.91406 718.57116 L 188.91406 718.57507 C 192.67408 727.60352 197.11843 736.38812 202.2207 744.81335 C 202.2207 744.81635 202.22202 744.82167 202.23242 744.82507 C 207.37168 753.24338 213.20941 761.25881 219.65234 768.76843 C 219.65234 768.77243 219.66372 768.77575 219.66602 768.78015 C 220.24282 769.44572 220.84965 770.08367 221.43555 770.74109 C 201.98173 778.09006 171.64327 787.74343 143.76758 789.45202 A 291 291 0 0 1 109 652.36218 A 291 291 0 0 1 400 361.36218 A 291 291 0 0 1 691 652.36218 A 291 291 0 0 1 690.09961 663.80945 A 198.29802 198.29802 0 0 1 719.98828 694.47351 A 323 323 0 0 0 723 652.36218 A 323 323 0 0 0 400 329.36218 z M 379.9668 424.8407 L 380.00781 424.8407 C 380.02161 424.84048 380.03416 424.84094 380.04688 424.8407 L 380.41992 424.84655 L 381.91016 424.87195 L 381.89258 424.86999 C 382.94876 424.89499 383.91498 424.89169 384.78906 424.92859 C 386.88746 425.0946 388.79671 425.12615 390.45312 425.35437 C 390.47643 425.35737 390.50024 425.36063 390.52344 425.36413 L 393.40625 425.69812 L 396.26758 426.17077 C 396.29398 426.17477 396.32106 426.18105 396.34766 426.18445 C 398.02493 426.42053 399.84996 426.88396 401.86328 427.29968 C 416.67244 430.91684 430.44919 438.47019 440.89648 449.11023 C 440.90928 449.12353 440.92285 449.13629 440.93555 449.14929 L 441.91406 450.11218 L 442.83984 451.1239 L 442.83984 451.1278 L 444.74805 453.21374 L 446.54688 455.39734 L 447.41211 456.45202 L 448.22852 457.55163 L 448.22852 457.55359 L 449.9082 459.82116 L 451.4668 462.17273 C 451.4668 462.17573 451.46606 462.17849 451.47656 462.18249 L 452.23242 463.3153 L 452.92773 464.48718 L 452.92773 464.48913 L 454.36914 466.91687 C 457.97582 473.4213 460.73865 480.38832 462.67969 487.61218 C 463.60757 491.32913 464.43529 494.98304 464.90039 498.63562 C 464.90104 498.63862 464.90039 498.64138 464.90039 498.64538 C 465.04254 499.73594 465.20843 500.64737 465.27734 501.41101 C 465.27798 501.42001 465.27734 501.42625 465.27734 501.43445 L 465.5625 504.35632 C 465.56316 504.36132 465.5625 504.36645 465.5625 504.37195 L 465.70312 505.74695 L 465.77148 507.05554 L 465.77148 507.05749 L 465.91797 509.82116 C 465.91859 509.82816 465.91797 509.83585 465.91797 509.84265 L 465.95508 510.45593 L 465.96484 511.17273 L 465.97852 512.80749 L 465.97852 512.82507 L 466.01758 516.05554 L 465.94727 518.67077 L 465.81641 521.60241 C 465.59236 525.51879 465.22688 529.42199 464.68359 533.29968 C 464.68284 533.30268 464.68359 533.3079 464.68359 533.3114 C 462.54957 548.86904 457.67378 564.21652 451.01367 578.97351 C 444.29481 593.71392 435.7663 607.84625 426.02148 621.26062 C 416.26926 634.6818 405.28776 647.37565 393.49219 659.37585 C 381.68575 671.37552 369.06624 682.68326 355.86133 693.32702 L 355.86133 693.32898 C 342.67078 703.9807 328.85295 713.9199 314.58594 723.18445 C 297.16067 734.46402 279.0445 744.70904 260.44531 753.80554 C 256.96122 750.33899 253.56573 746.7791 250.46094 742.96374 L 250.46094 742.95788 C 250.46094 742.95488 250.45117 742.95212 250.45117 742.94812 C 248.04694 739.95831 245.75563 736.87254 243.57617 733.70398 L 243.56641 733.69421 C 241.40714 730.53347 239.38086 727.24912 237.42969 723.89148 L 237.42969 723.88562 C 233.56421 717.2024 230.20792 710.18147 227.33203 702.92468 L 227.33203 702.92273 C 221.56259 688.41177 217.75898 672.94552 215.73438 657.09851 L 215.73438 657.07312 C 215.20206 653.13313 214.80769 649.14706 214.49805 645.12976 L 214.49805 645.1278 C 214.1919 641.17444 214.00774 637.06746 213.9082 633.24695 L 213.9082 633.24304 L 213.82812 627.05163 L 213.82812 627.02429 C 213.84412 625.07527 213.85298 623.1859 213.94531 621.33874 C 213.94614 621.32414 213.94531 621.31037 213.94531 621.29577 C 214.08923 617.47891 214.40038 613.63681 214.86328 609.7821 L 214.86328 609.75476 C 216.59221 594.29215 220.56908 578.7115 226.0332 563.50085 L 226.0332 563.49109 C 228.7941 555.8848 231.89523 548.36771 235.40625 541.03015 C 235.40625 541.02115 235.41752 541.01171 235.41992 541.0028 C 238.86595 533.64081 242.75949 526.43767 246.91992 519.34851 L 246.92969 519.33874 C 255.26319 505.23816 264.98057 491.89556 275.91992 479.68249 L 275.93164 479.67077 C 281.42836 473.58875 287.20394 467.78073 293.32031 462.43445 C 293.32031 462.43145 293.33008 462.43063 293.33008 462.42663 C 299.45987 457.03405 305.85746 452.00473 312.57031 447.54382 C 312.57031 447.54283 312.56958 447.54091 312.58008 447.53991 C 325.99711 438.58679 340.64849 431.65008 355.90625 427.92663 C 355.90625 427.92613 355.90552 427.92569 355.91602 427.92468 C 359.74471 427.01202 363.58757 426.26647 367.42969 425.76257 C 367.45499 425.75957 367.48036 425.75535 367.50586 425.75085 C 368.31728 425.62575 369.27545 425.55213 370.36914 425.42273 L 370.38086 425.42077 C 371.36062 425.30774 372.29486 425.2106 373.09961 425.16687 C 373.11871 425.16632 373.13725 425.16591 373.15625 425.16491 L 375.9668 424.9657 L 379.19531 424.86413 L 379.9668 424.8407 z M 564.06445 653.20398 C 473.57953 653.20398 400.375 726.40851 400.375 816.89343 C 400.375 907.37835 473.57953 980.58288 564.06445 980.58288 C 654.54937 980.58288 727.75391 907.37835 727.75391 816.89343 C 727.75391 726.40851 654.54937 653.20398 564.06445 653.20398 z M 564.06445 678.16882 C 640.79402 678.16882 702.78906 740.16386 702.78906 816.89343 C 702.78906 893.623 640.79402 955.61804 564.06445 955.61804 C 487.33489 955.61804 425.33984 893.623 425.33984 816.89343 C 425.33984 740.16386 487.33489 678.16882 564.06445 678.16882 z M 565.35352 706.00671 C 550.97873 706.00671 539.54883 717.19599 539.54883 731.20788 C 539.54883 745.21977 550.97873 757.03405 565.35352 757.03405 C 579.7283 757.03405 591.20117 745.21977 591.20117 731.20788 C 591.20117 717.19599 579.7283 706.00671 565.35352 706.00671 z M 657.8125 758.10437 L 564.10547 773.42468 L 471.48633 758.30554 A 6.2499063 6.2499063 0 0 0 467.71484 758.92859 A 7.2781167 7.2781167 0 0 0 463.2793 765.22155 C 463.2591 767.94328 465.19532 770.26001 467.71484 771.53015 L 537.00781 792.94226 L 536.38281 842.74109 L 511.80859 916.42663 C 509.44975 919.79352 510.17495 923.64517 513.70312 925.9032 C 517.2313 928.12091 522.69258 927.35538 525.03125 924.00866 L 564.10547 844.61413 L 603.1582 924.00866 A 7.3990826 7.3990826 0 0 0 613.23633 926.5282 C 616.90563 924.51211 618.47892 920.53948 616.40234 917.05163 L 592.45117 842.7196 L 591.20117 796.73327 L 661.76562 771.53015 A 7.4192436 7.4192436 0 0 0 664.28516 762.70007 C 663.05534 759.6356 659.52813 757.92293 657.81445 758.10437 L 657.8125 758.10437 z " />
    <path
       id="path7-3"
       style="font-variation-settings:normal;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:4.62851988;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;opacity:0.0409265;stop-opacity:1;filter:url(#filter10305-5)"
       d="m 400,339.36218 a 323,323 0 0 0 -323,323 323,323 0 0 0 323,323 323,323 0 0 0 41.7168,-2.98242 A 198.29802,198.29802 0 0 1 411.01562,952.49499 291,291 0 0 1 400,953.36218 291,291 0 0 1 168.18359,837.62976 c 27.77861,-5.93118 55.01715,-15.56955 84.63282,-29.125 4.04756,2.78173 8.2109,5.40215 12.49023,7.81445 0,9.9e-4 -6.3e-4,0.003 0.01,0.004 0,9.8e-4 0.01,0.002 0.01,0.004 17.15749,9.78362 35.81519,16.43988 54.7461,20.25196 l 0.01,0.002 c 10.00342,1.99584 19.20948,3.15602 28.51172,3.7207 0,1.8e-4 0.01,-1.8e-4 0.01,0 9.23374,0.63001 17.90395,0.53195 28.2539,0.0879 0.0105,10e-6 0.0112,10e-6 0.0176,0 l -0.9375,-33.93164 -0.0156,-0.002 c -16.88237,0.0938 -31.75117,-1.23425 -47.9961,-5.19727 v -0.002 c -12.2072,-3.00211 -23.86504,-7.52439 -34.74414,-13.30664 14.01243,-7.79265 27.72049,-16.08777 41.04102,-24.95312 0,-0.002 0.01,-0.004 0.01,-0.006 30.10126,-20.1823 58.64514,-42.96671 84.19336,-69.25 12.76302,-13.13677 24.77962,-27.15592 35.61133,-42.23633 v -0.002 c 5.429,-7.53698 10.53508,-15.35233 15.27344,-23.42968 v -0.0117 c 4.71927,-8.10254 9.03467,-16.49236 12.87109,-25.15625 v -0.004 c 7.65964,-17.3454 13.25791,-35.9492 15.62695,-55.27344 v -0.002 c 0.58885,-4.81719 0.9964,-9.67879 1.15821,-14.57422 7.4e-4,-0.0138 0,-0.029 0,-0.043 0.0243,-1.15523 0.0714,-2.36603 0.0801,-3.63476 v -0.0234 -3.87891 c 0,-0.0399 -6.4e-4,-0.0793 0,-0.11914 l -0.11524,-3.29296 v -0.002 -0.002 -0.006 -0.002 l -0.0645,-1.64649 c -6.3e-4,-0.009 0,-0.0184 0,-0.0273 l -0.0391,-0.83985 c 0,-0.0331 7.4e-4,-0.0667 -0.01,-0.0996 l -0.0723,-0.95313 c -6.3e-4,-0.007 0,-0.0158 0,-0.0234 l -0.31445,-3.81054 c -6.4e-4,-0.007 0,-0.0139 0,-0.0215 l -0.16797,-1.89648 c 0,-0.0462 -0.0112,-0.0906 -0.0156,-0.13672 l -0.23828,-1.81445 c -7.6e-4,-0.005 0,-0.0121 0,-0.0176 l -0.49024,-3.625 c -7.3e-4,-0.003 0,-0.005 0,-0.008 -0.19138,-1.38334 -0.46564,-2.62185 -0.66211,-3.73046 -0.87863,-5.01385 -2.19539,-9.88885 -3.62695,-14.64649 0,-0.0146 -0.0112,-0.0304 -0.0156,-0.0449 -3.04827,-9.65999 -7.41576,-18.89699 -12.79882,-27.44727 -0.018,-0.0277 -0.0369,-0.0547 -0.0547,-0.082 l -2.05274,-3.06445 c 0,-0.005 -0.01,-0.009 -0.01,-0.0137 l -1.03516,-1.52539 c -0.0284,-0.0425 -0.0574,-0.0857 -0.0879,-0.12696 l -1.10547,-1.47851 c 0,-0.003 7.4e-4,-0.006 -0.01,-0.01 l -2.21094,-2.94531 c -0.0339,-0.0442 -0.0676,-0.0864 -0.10352,-0.12891 l -2.35351,-2.83789 c 0,-0.003 7.3e-4,-0.004 -0.01,-0.008 l -1.17969,-1.41211 c -0.0339,-0.0406 -0.0685,-0.0801 -0.10546,-0.11914 l -1.24414,-1.35742 c 0,-0.002 6.3e-4,-0.004 -0.01,-0.006 l -2.49414,-2.70313 c -0.0361,-0.0386 -0.0716,-0.0764 -0.10938,-0.11328 l -2.61328,-2.58203 c 0,-0.005 -0.009,-0.011 -0.0137,-0.0156 l -1.3164,-1.28321 c -0.0361,-0.0346 -0.0717,-0.0687 -0.10938,-0.10156 l -1.31641,-1.17578 c -3.76837,-3.51342 -7.8241,-6.51585 -11.8125,-9.375 -0.0401,-0.0291 -0.0816,-0.0567 -0.12304,-0.084 -1.96334,-1.27967 -4.00588,-2.74138 -6.33203,-4.05664 -0.98664,-0.57806 -2.02678,-1.22416 -3.17774,-1.85938 -0.018,-0.01 -0.0369,-0.0201 -0.0547,-0.0293 l -3.20898,-1.70117 c -0.0104,-0.005 -0.022,-0.0101 -0.0312,-0.0156 -8.89579,-4.58494 -18.32335,-7.97917 -27.95117,-10.26953 -0.0371,-0.009 -0.0738,-0.0178 -0.11133,-0.0254 -2.24277,-0.45408 -4.64158,-1.07858 -7.26953,-1.45898 l -3.5,-0.57617 c -0.0496,-0.009 -0.0991,-0.0138 -0.14844,-0.0195 l -3.49805,-0.41797 c -2.62935,-0.37933 -5.09712,-0.45726 -7.36914,-0.65625 -0.0371,-0.003 -0.0738,-0.004 -0.11132,-0.006 -1.29218,-0.0703 -2.51543,-0.0859 -3.66797,-0.125 -0.0105,-2e-5 -0.0132,-2e-5 -0.0195,0 l -1.79883,-0.0508 -0.44922,-0.0117 c -0.0273,-9.8e-4 -0.0545,-0.002 -0.082,-0.002 l -0.625,-0.002 c -0.0117,-8e-5 -0.0235,-8e-5 -0.0352,0 l -0.82617,0.006 -3.29492,0.0254 c -0.0412,6.1e-4 -0.0817,0.002 -0.12305,0.004 l -3.70117,0.16016 c -1.35314,0.0493 -2.60186,0.15466 -3.78516,0.25976 -0.0104,-2e-5 -0.0133,-2e-5 -0.0195,0 -1.08906,0.10241 -2.30853,0.17172 -3.63281,0.33789 -4.88182,0.5222 -9.66226,1.35576 -14.36719,2.29492 -0.0128,0.003 -0.0265,0.004 -0.0391,0.008 -19.044,4.02453 -36.90451,11.66929 -53.23242,21.30273 -16.40471,9.62428 -31.23104,21.43909 -44.73828,34.43555 0,0.003 -0.01,0.006 -0.01,0.01 -13.48466,13.06909 -25.57931,27.50398 -36.19727,42.99805 v 0.002 c -10.60369,15.50124 -19.74906,32.11001 -26.96093,49.72071 -7.24674,17.58836 -12.57849,36.2215 -15.15235,55.66601 v 0.002 c -0.6401,4.8615 -1.07491,9.77374 -1.3164,14.7168 -3.1e-4,0.005 3.2e-4,0.009 0,0.0137 -3.1e-4,0.006 0,0.0134 0,0.0195 -0.14457,2.50724 -0.19132,4.98947 -0.22852,7.43165 v 0.0195 l -0.01,1.06445 c -1.1e-4,0.0111 -1e-4,0.022 0,0.0332 v 0.82422 0.0195 l 0.01,1.64844 v 0.01 l 0.0156,1.64843 v 0.0195 l 0.0137,0.82618 c 6.3e-4,0.0138 0,0.027 0,0.041 l 0.0234,0.90625 c 0.1195,4.94908 0.33403,9.61489 0.69726,14.39453 v 0.002 c 0.36237,4.7465 0.83111,9.50846 1.4707,14.27539 1.25866,9.51375 3.11867,18.98123 5.52344,28.33789 0,0.007 -6.3e-4,0.0158 0.01,0.0234 2.47356,9.35904 5.54674,18.60521 9.29101,27.63671 v 0.004 c 3.76002,9.02845 8.20437,17.81305 13.30664,26.23828 0,0.003 0.001,0.008 0.0117,0.0117 5.13926,8.41831 10.97699,16.43374 17.41992,23.94336 0,0.004 0.0114,0.007 0.0137,0.0117 0.5768,0.66557 1.18363,1.30352 1.76953,1.96094 -19.45382,7.34897 -49.79228,17.00234 -77.66797,18.71093 A 291,291 0 0 1 109,662.36218 a 291,291 0 0 1 291,-291 291,291 0 0 1 291,291 291,291 0 0 1 -0.90039,11.44727 198.29802,198.29802 0 0 1 29.88867,30.66406 323,323 0 0 0 3.01172,-42.11133 323,323 0 0 0 -323,-323 z m -20.0332,95.47852 h 0.041 c 0.0138,-2.2e-4 0.0263,2.4e-4 0.0391,0 l 0.37304,0.006 1.49024,0.0254 -0.0176,-0.002 c 1.05618,0.025 2.0224,0.0217 2.89648,0.0586 2.0984,0.16601 4.00765,0.19756 5.66406,0.42578 0.0233,0.003 0.0471,0.006 0.0703,0.01 l 2.88281,0.33399 2.86133,0.47265 c 0.0264,0.004 0.0535,0.0103 0.0801,0.0137 1.67727,0.23608 3.5023,0.69951 5.51562,1.11523 14.80916,3.61716 28.58591,11.17051 39.0332,21.81055 0.0128,0.0133 0.0264,0.0261 0.0391,0.0391 l 0.97851,0.96289 0.92578,1.01172 v 0.004 l 1.90821,2.08594 1.79883,2.1836 0.86523,1.05468 0.81641,1.09961 v 0.002 l 1.67968,2.26757 1.5586,2.35157 c 0,0.003 -7.4e-4,0.006 0.01,0.01 l 0.75586,1.13281 0.69531,1.17188 v 0.002 l 1.44141,2.42774 c 3.60668,6.50443 6.36951,13.47145 8.31055,20.69531 0.92788,3.71695 1.7556,7.37086 2.2207,11.02344 6.5e-4,0.003 0,0.006 0,0.01 0.14215,1.09056 0.30804,2.00199 0.37695,2.76563 6.4e-4,0.009 0,0.0152 0,0.0234 l 0.28516,2.92187 c 6.6e-4,0.005 0,0.0101 0,0.0156 l 0.14062,1.375 0.0684,1.30859 v 0.002 l 0.14649,2.76367 c 6.2e-4,0.007 0,0.0147 0,0.0215 l 0.0371,0.61328 0.01,0.7168 0.0137,1.63476 v 0.0176 l 0.0391,3.23047 -0.0703,2.61523 -0.13086,2.93164 c -0.22405,3.91638 -0.58953,7.81958 -1.13282,11.69727 -7.5e-4,0.003 0,0.008 0,0.0117 -2.13402,15.55764 -7.00981,30.90512 -13.66992,45.66211 -6.71886,14.74041 -15.24737,28.87274 -24.99219,42.28711 -9.75222,13.42118 -20.73372,26.11503 -32.52929,38.11523 -11.80644,11.99967 -24.42595,23.30741 -37.63086,33.95117 v 0.002 c -13.19055,10.65172 -27.00838,20.59092 -41.27539,29.85547 -17.42527,11.27957 -35.54144,21.52459 -54.14063,30.62109 -3.48409,-3.46655 -6.87958,-7.02644 -9.98437,-10.8418 v -0.006 c 0,-0.003 -0.01,-0.006 -0.01,-0.01 -2.40423,-2.98981 -4.69554,-6.07558 -6.875,-9.24414 l -0.01,-0.01 c -2.15927,-3.16074 -4.18555,-6.44509 -6.13672,-9.80273 v -0.006 c -3.86548,-6.68322 -7.22177,-13.70415 -10.09766,-20.96094 v -0.002 c -5.76944,-14.51096 -9.57305,-29.97721 -11.59765,-45.82422 v -0.0254 c -0.53232,-3.93999 -0.92669,-7.92606 -1.23633,-11.94336 v -0.002 c -0.30615,-3.95336 -0.49031,-8.06034 -0.58985,-11.88085 v -0.004 l -0.0801,-6.19141 v -0.0273 c 0.016,-1.94902 0.0249,-3.83839 0.11719,-5.68555 8.3e-4,-0.0146 0,-0.0284 0,-0.043 0.14392,-3.81686 0.45507,-7.65896 0.91797,-11.51367 v -0.0273 c 1.72893,-15.46261 5.7058,-31.04326 11.16992,-46.25391 v -0.01 c 2.7609,-7.60629 5.86203,-15.12338 9.37305,-22.46094 0,-0.009 0.0113,-0.0184 0.0137,-0.0274 3.44603,-7.36199 7.33957,-14.56513 11.5,-21.65429 l 0.01,-0.01 c 8.3335,-14.10058 18.05088,-27.44318 28.99023,-39.65625 l 0.0117,-0.0117 c 5.49672,-6.08202 11.2723,-11.89004 17.38867,-17.23632 0,-0.003 0.01,-0.004 0.01,-0.008 6.12979,-5.39258 12.52738,-10.4219 19.24023,-14.88281 0,-9.9e-4 -7.3e-4,-0.003 0.01,-0.004 13.41703,-8.95312 28.06841,-15.88983 43.32617,-19.61328 0,-5e-4 -7.3e-4,-9.4e-4 0.01,-0.002 3.82869,-0.91266 7.67155,-1.65821 11.51367,-2.16211 0.0253,-0.003 0.0507,-0.007 0.0762,-0.0117 0.81142,-0.1251 1.76959,-0.19872 2.86328,-0.32812 l 0.0117,-0.002 c 0.97976,-0.11303 1.914,-0.21017 2.71875,-0.2539 0.0191,-5.5e-4 0.0376,-9.6e-4 0.0566,-0.002 l 2.81055,-0.19921 3.22851,-0.10157 z m 184.09765,228.36328 c -90.48492,0 -163.68945,73.20453 -163.68945,163.68945 0,90.48492 73.20453,163.68945 163.68945,163.68945 90.48492,0 163.68946,-73.20453 163.68946,-163.68945 0,-90.48492 -73.20454,-163.68945 -163.68946,-163.68945 z m 0,24.96484 c 76.72957,0 138.72461,61.99504 138.72461,138.72461 0,76.72957 -61.99504,138.72461 -138.72461,138.72461 -76.72956,0 -138.72461,-61.99504 -138.72461,-138.72461 0,-76.72957 61.99505,-138.72461 138.72461,-138.72461 z m 1.28907,27.83789 c -14.37479,0 -25.80469,11.18928 -25.80469,25.20117 0,14.01189 11.4299,25.82617 25.80469,25.82617 14.37478,0 25.84765,-11.81428 25.84765,-25.82617 0,-14.01189 -11.47287,-25.20117 -25.84765,-25.20117 z m 92.45898,52.09766 -93.70703,15.32031 -92.61914,-15.11914 a 6.2499063,6.2499063 0 0 0 -3.77149,0.62305 7.2781167,7.2781167 0 0 0 -4.43554,6.29296 c -0.0202,2.72173 1.91602,5.03846 4.43554,6.3086 l 69.29297,21.41211 -0.625,49.79883 -24.57422,73.68554 c -2.35884,3.36689 -1.63364,7.21854 1.89453,9.47657 3.52818,2.21771 8.98946,1.45218 11.32813,-1.89454 l 39.07422,-79.39453 39.05273,79.39453 a 7.3990826,7.3990826 0 0 0 10.07813,2.51954 c 3.6693,-2.01609 5.24259,-5.98872 3.16601,-9.47657 l -23.95117,-74.33203 -1.25,-45.98633 70.56445,-25.20312 a 7.4192436,7.4192436 0 0 0 2.51954,-8.83008 c -1.22982,-3.06447 -4.75703,-4.77714 -6.47071,-4.5957 z" />
    <path
       id="path7-5"
       style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#fafafa;fill-opacity:1;stroke:none;stroke-width:4.62852;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;filter:url(#filter10306-1);stop-color:#000000;stop-opacity:1"
       d="m 400,323.36218 a 323,323 0 0 0 -323,323 323,323 0 0 0 323,323 323,323 0 0 0 41.7168,-2.98242 A 198.29802,198.29802 0 0 1 411.01562,936.49499 291,291 0 0 1 400,937.36218 291,291 0 0 1 168.18359,821.62976 c 27.77861,-5.93118 55.01715,-15.56955 84.63282,-29.125 4.04756,2.78173 8.2109,5.40215 12.49023,7.81445 0,9.9e-4 -6.3e-4,0.003 0.01,0.004 0,9.8e-4 0.01,0.002 0.01,0.004 17.15749,9.78362 35.81519,16.43988 54.7461,20.25196 l 0.01,0.002 c 10.00342,1.99584 19.20948,3.15602 28.51172,3.7207 0,1.8e-4 0.01,-1.8e-4 0.01,0 9.23374,0.63001 17.90395,0.53195 28.2539,0.0879 0.0105,10e-6 0.0112,10e-6 0.0176,0 l -0.9375,-33.93164 -0.0156,-0.002 c -16.88237,0.0938 -31.75117,-1.23425 -47.9961,-5.19727 v -0.002 c -12.2072,-3.00211 -23.86504,-7.52439 -34.74414,-13.30664 14.01243,-7.79265 27.72049,-16.08777 41.04102,-24.95312 0,-0.002 0.01,-0.004 0.01,-0.006 30.10126,-20.1823 58.64514,-42.96671 84.19336,-69.25 12.76302,-13.13677 24.77962,-27.15592 35.61133,-42.23633 v -0.002 c 5.429,-7.53698 10.53508,-15.35233 15.27344,-23.42968 v -0.0117 c 4.71927,-8.10254 9.03467,-16.49236 12.87109,-25.15625 v -0.004 c 7.65964,-17.3454 13.25791,-35.9492 15.62695,-55.27344 v -0.002 c 0.58885,-4.81719 0.9964,-9.67879 1.15821,-14.57422 7.4e-4,-0.0138 0,-0.029 0,-0.043 0.0243,-1.15523 0.0714,-2.36603 0.0801,-3.63476 v -0.0234 -3.87891 c 0,-0.0399 -6.4e-4,-0.0793 0,-0.11914 l -0.11524,-3.29296 v -0.002 -0.002 -0.006 -0.002 l -0.0645,-1.64649 c -6.3e-4,-0.009 0,-0.0184 0,-0.0273 l -0.0391,-0.83985 c 0,-0.0331 7.4e-4,-0.0667 -0.01,-0.0996 l -0.0723,-0.95313 c -6.3e-4,-0.007 0,-0.0158 0,-0.0234 l -0.31445,-3.81054 c -6.4e-4,-0.007 0,-0.0139 0,-0.0215 l -0.16797,-1.89648 c 0,-0.0462 -0.0112,-0.0906 -0.0156,-0.13672 l -0.23828,-1.81445 c -7.6e-4,-0.005 0,-0.0121 0,-0.0176 l -0.49024,-3.625 c -7.3e-4,-0.003 0,-0.005 0,-0.008 -0.19138,-1.38334 -0.46564,-2.62185 -0.66211,-3.73046 -0.87863,-5.01385 -2.19539,-9.88885 -3.62695,-14.64649 0,-0.0146 -0.0112,-0.0304 -0.0156,-0.0449 -3.04827,-9.65999 -7.41576,-18.89699 -12.79882,-27.44727 -0.018,-0.0277 -0.0369,-0.0547 -0.0547,-0.082 l -2.05274,-3.06445 c 0,-0.005 -0.01,-0.009 -0.01,-0.0137 l -1.03516,-1.52539 c -0.0284,-0.0425 -0.0574,-0.0857 -0.0879,-0.12696 l -1.10547,-1.47851 c 0,-0.003 7.4e-4,-0.006 -0.01,-0.01 l -2.21094,-2.94531 c -0.0339,-0.0442 -0.0676,-0.0864 -0.10352,-0.12891 l -2.35351,-2.83789 c 0,-0.003 7.3e-4,-0.004 -0.01,-0.008 l -1.17969,-1.41211 c -0.0339,-0.0406 -0.0685,-0.0801 -0.10546,-0.11914 l -1.24414,-1.35742 c 0,-0.002 6.3e-4,-0.004 -0.01,-0.006 l -2.49414,-2.70313 c -0.0361,-0.0386 -0.0716,-0.0764 -0.10938,-0.11328 l -2.61328,-2.58203 c 0,-0.005 -0.009,-0.011 -0.0137,-0.0156 l -1.3164,-1.28321 c -0.0361,-0.0346 -0.0717,-0.0687 -0.10938,-0.10156 l -1.31641,-1.17578 c -3.76837,-3.51342 -7.8241,-6.51585 -11.8125,-9.375 -0.0401,-0.0291 -0.0816,-0.0567 -0.12304,-0.084 -1.96334,-1.27967 -4.00588,-2.74138 -6.33203,-4.05664 -0.98664,-0.57806 -2.02678,-1.22416 -3.17774,-1.85938 -0.018,-0.01 -0.0369,-0.0201 -0.0547,-0.0293 l -3.20898,-1.70117 c -0.0104,-0.005 -0.022,-0.0101 -0.0312,-0.0156 -8.89579,-4.58494 -18.32335,-7.97917 -27.95117,-10.26953 -0.0371,-0.009 -0.0738,-0.0178 -0.11133,-0.0254 -2.24277,-0.45408 -4.64158,-1.07858 -7.26953,-1.45898 l -3.5,-0.57617 c -0.0496,-0.009 -0.0991,-0.0138 -0.14844,-0.0195 l -3.49805,-0.41797 c -2.62935,-0.37933 -5.09712,-0.45726 -7.36914,-0.65625 -0.0371,-0.003 -0.0738,-0.004 -0.11132,-0.006 -1.29218,-0.0703 -2.51543,-0.0859 -3.66797,-0.125 -0.0105,-2e-5 -0.0132,-2e-5 -0.0195,0 l -1.79883,-0.0508 -0.44922,-0.0117 c -0.0273,-9.8e-4 -0.0545,-0.002 -0.082,-0.002 l -0.625,-0.002 c -0.0117,-8e-5 -0.0235,-8e-5 -0.0352,0 l -0.82617,0.006 -3.29492,0.0254 c -0.0412,6.1e-4 -0.0817,0.002 -0.12305,0.004 l -3.70117,0.16016 c -1.35314,0.0493 -2.60186,0.15466 -3.78516,0.25976 -0.0104,-2e-5 -0.0133,-2e-5 -0.0195,0 -1.08906,0.10241 -2.30853,0.17172 -3.63281,0.33789 -4.88182,0.5222 -9.66226,1.35576 -14.36719,2.29492 -0.0128,0.003 -0.0265,0.004 -0.0391,0.008 -19.044,4.02453 -36.90451,11.66929 -53.23242,21.30273 -16.40471,9.62428 -31.23104,21.43909 -44.73828,34.43555 0,0.003 -0.01,0.006 -0.01,0.01 -13.48466,13.06909 -25.57931,27.50398 -36.19727,42.99805 v 0.002 c -10.60369,15.50124 -19.74906,32.11001 -26.96093,49.72071 -7.24674,17.58836 -12.57849,36.2215 -15.15235,55.66601 v 0.002 c -0.6401,4.8615 -1.07491,9.77374 -1.3164,14.7168 -3.1e-4,0.005 3.2e-4,0.009 0,0.0137 -3.1e-4,0.006 0,0.0134 0,0.0195 -0.14457,2.50724 -0.19132,4.98947 -0.22852,7.43165 v 0.0195 l -0.01,1.06445 c -1.1e-4,0.0111 -1e-4,0.022 0,0.0332 v 0.82422 0.0195 l 0.01,1.64844 v 0.01 l 0.0156,1.64843 v 0.0195 l 0.0137,0.82618 c 6.3e-4,0.0138 0,0.027 0,0.041 l 0.0234,0.90625 c 0.1195,4.94908 0.33403,9.61489 0.69726,14.39453 v 0.002 c 0.36237,4.7465 0.83111,9.50846 1.4707,14.27539 1.25866,9.51375 3.11867,18.98123 5.52344,28.33789 0,0.007 -6.3e-4,0.0158 0.01,0.0234 2.47356,9.35904 5.54674,18.60521 9.29101,27.63671 v 0.004 c 3.76002,9.02845 8.20437,17.81305 13.30664,26.23828 0,0.003 0.001,0.008 0.0117,0.0117 5.13926,8.41831 10.97699,16.43374 17.41992,23.94336 0,0.004 0.0114,0.007 0.0137,0.0117 0.5768,0.66557 1.18363,1.30352 1.76953,1.96094 -19.45382,7.34897 -49.79228,17.00234 -77.66797,18.71093 A 291,291 0 0 1 109,646.36218 a 291,291 0 0 1 291,-291 291,291 0 0 1 291,291 291,291 0 0 1 -0.90039,11.44727 198.29802,198.29802 0 0 1 29.88867,30.66406 323,323 0 0 0 3.01172,-42.11133 323,323 0 0 0 -323,-323 z m -20.0332,95.47852 h 0.041 c 0.0138,-2.2e-4 0.0263,2.4e-4 0.0391,0 l 0.37304,0.006 1.49024,0.0254 -0.0176,-0.002 c 1.05618,0.025 2.0224,0.0217 2.89648,0.0586 2.0984,0.16601 4.00765,0.19756 5.66406,0.42578 0.0233,0.003 0.0471,0.006 0.0703,0.01 l 2.88281,0.33399 2.86133,0.47265 c 0.0264,0.004 0.0535,0.0103 0.0801,0.0137 1.67727,0.23608 3.5023,0.69951 5.51562,1.11523 14.80916,3.61716 28.58591,11.17051 39.0332,21.81055 0.0128,0.0133 0.0264,0.0261 0.0391,0.0391 l 0.97851,0.96289 0.92578,1.01172 v 0.004 l 1.90821,2.08594 1.79883,2.1836 0.86523,1.05468 0.81641,1.09961 v 0.002 l 1.67968,2.26757 1.5586,2.35157 c 0,0.003 -7.4e-4,0.006 0.01,0.01 l 0.75586,1.13281 0.69531,1.17188 v 0.002 l 1.44141,2.42774 c 3.60668,6.50443 6.36951,13.47145 8.31055,20.69531 0.92788,3.71695 1.7556,7.37086 2.2207,11.02344 6.5e-4,0.003 0,0.006 0,0.01 0.14215,1.09056 0.30804,2.00199 0.37695,2.76563 6.4e-4,0.009 0,0.0152 0,0.0234 l 0.28516,2.92187 c 6.6e-4,0.005 0,0.0101 0,0.0156 l 0.14062,1.375 0.0684,1.30859 v 0.002 l 0.14649,2.76367 c 6.2e-4,0.007 0,0.0147 0,0.0215 l 0.0371,0.61328 0.01,0.7168 0.0137,1.63476 v 0.0176 l 0.0391,3.23047 -0.0703,2.61523 -0.13086,2.93164 c -0.22405,3.91638 -0.58953,7.81958 -1.13282,11.69727 -7.5e-4,0.003 0,0.008 0,0.0117 -2.13402,15.55764 -7.00981,30.90512 -13.66992,45.66211 -6.71886,14.74041 -15.24737,28.87274 -24.99219,42.28711 -9.75222,13.42118 -20.73372,26.11503 -32.52929,38.11523 -11.80644,11.99967 -24.42595,23.30741 -37.63086,33.95117 v 0.002 c -13.19055,10.65172 -27.00838,20.59092 -41.27539,29.85547 -17.42527,11.27957 -35.54144,21.52459 -54.14063,30.62109 -3.48409,-3.46655 -6.87958,-7.02644 -9.98437,-10.8418 v -0.006 c 0,-0.003 -0.01,-0.006 -0.01,-0.01 -2.40423,-2.98981 -4.69554,-6.07558 -6.875,-9.24414 l -0.01,-0.01 c -2.15927,-3.16074 -4.18555,-6.44509 -6.13672,-9.80273 v -0.006 c -3.86548,-6.68322 -7.22177,-13.70415 -10.09766,-20.96094 v -0.002 c -5.76944,-14.51096 -9.57305,-29.97721 -11.59765,-45.82422 v -0.0254 c -0.53232,-3.93999 -0.92669,-7.92606 -1.23633,-11.94336 v -0.002 c -0.30615,-3.95336 -0.49031,-8.06034 -0.58985,-11.88085 v -0.004 l -0.0801,-6.19141 v -0.0273 c 0.016,-1.94902 0.0249,-3.83839 0.11719,-5.68555 8.3e-4,-0.0146 0,-0.0284 0,-0.043 0.14392,-3.81686 0.45507,-7.65896 0.91797,-11.51367 v -0.0273 c 1.72893,-15.46261 5.7058,-31.04326 11.16992,-46.25391 v -0.01 c 2.7609,-7.60629 5.86203,-15.12338 9.37305,-22.46094 0,-0.009 0.0113,-0.0184 0.0137,-0.0274 3.44603,-7.36199 7.33957,-14.56513 11.5,-21.65429 l 0.01,-0.01 c 8.3335,-14.10058 18.05088,-27.44318 28.99023,-39.65625 l 0.0117,-0.0117 c 5.49672,-6.08202 11.2723,-11.89004 17.38867,-17.23632 0,-0.003 0.01,-0.004 0.01,-0.008 6.12979,-5.39258 12.52738,-10.4219 19.24023,-14.88281 0,-9.9e-4 -7.3e-4,-0.003 0.01,-0.004 13.41703,-8.95312 28.06841,-15.88983 43.32617,-19.61328 0,-5e-4 -7.3e-4,-9.4e-4 0.01,-0.002 3.82869,-0.91266 7.67155,-1.65821 11.51367,-2.16211 0.0253,-0.003 0.0507,-0.007 0.0762,-0.0117 0.81142,-0.1251 1.76959,-0.19872 2.86328,-0.32812 l 0.0117,-0.002 c 0.97976,-0.11303 1.914,-0.21017 2.71875,-0.2539 0.0191,-5.5e-4 0.0376,-9.6e-4 0.0566,-0.002 l 2.81055,-0.19921 3.22851,-0.10157 z m 184.09765,228.36328 c -90.48492,0 -163.68945,73.20453 -163.68945,163.68945 0,90.48492 73.20453,163.68945 163.68945,163.68945 90.48492,0 163.68946,-73.20453 163.68946,-163.68945 0,-90.48492 -73.20454,-163.68945 -163.68946,-163.68945 z m 0,24.96484 c 76.72957,0 138.72461,61.99504 138.72461,138.72461 0,76.72957 -61.99504,138.72461 -138.72461,138.72461 -76.72956,0 -138.72461,-61.99504 -138.72461,-138.72461 0,-76.72957 61.99505,-138.72461 138.72461,-138.72461 z m 1.28907,27.83789 c -14.37479,0 -25.80469,11.18928 -25.80469,25.20117 0,14.01189 11.4299,25.82617 25.80469,25.82617 14.37478,0 25.84765,-11.81428 25.84765,-25.82617 0,-14.01189 -11.47287,-25.20117 -25.84765,-25.20117 z m 92.45898,52.09766 -93.70703,15.32031 -92.61914,-15.11914 a 6.2499063,6.2499063 0 0 0 -3.77149,0.62305 7.2781167,7.2781167 0 0 0 -4.43554,6.29296 c -0.0202,2.72173 1.91602,5.03846 4.43554,6.3086 l 69.29297,21.41211 -0.625,49.79883 -24.57422,73.68554 c -2.35884,3.36689 -1.63364,7.21854 1.89453,9.47657 3.52818,2.21771 8.98946,1.45218 11.32813,-1.89454 l 39.07422,-79.39453 39.05273,79.39453 a 7.3990826,7.3990826 0 0 0 10.07813,2.51954 c 3.6693,-2.01609 5.24259,-5.98872 3.16601,-9.47657 l -23.95117,-74.33203 -1.25,-45.98633 70.56445,-25.20312 a 7.4192436,7.4192436 0 0 0 2.51954,-8.83008 c -1.22982,-3.06447 -4.75703,-4.77714 -6.47071,-4.5957 z"
       mask="url(#mask7)" />
  </g>
  <script
     id="script1"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
  <script
     id="script2"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
